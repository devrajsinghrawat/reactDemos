{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-list/search-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","user","id","name","email","CardList","users","map","userObj","key","SearchList","type","placeholder","onChange","handleChange","App","onDataChange","e","setState","searchText","target","value","state","data","fetch","then","res","json","this","filterData","filter","_","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mVAIaA,G,MAAO,SAACC,GACjB,OAAO,yBAAKC,UAAU,kBACV,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BH,EAAMI,KAAKC,GAArC,eACnB,4BAAKL,EAAMI,KAAKE,MAChB,2BAAIN,EAAMI,KAAKG,UCHlBC,G,MAAW,SAACR,GACrB,OAAO,yBAAKC,UAAU,aAEVD,EAAMS,MAAMC,KAAK,SAAAC,GACjB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAQN,GAAID,KAAMO,UCLvCE,G,YAAa,SAACb,GAEvB,OAAO,yBAAKC,UAAU,eACd,2BACIa,KAAK,SACLC,YAAaf,EAAMe,YACnBC,SAAUhB,EAAMiB,kBC+BjBC,E,YAnCX,aAAc,IAAD,8BACX,+CAaFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,WAAWF,EAAEG,OAAOC,SAbnC,EAAKC,MAAQ,CACXC,KAAM,GACNJ,WAAW,IAJF,E,iFAQO,IAAD,OACjBK,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAnB,GAAK,OAAI,EAAKY,SAAS,CAACK,KAAKjB,S,+BAO7B,IAAD,EACoBsB,KAAKN,MAAzBC,EADA,EACAA,KAAMJ,EADN,EACMA,WACPU,EAAaN,EAAKO,QAAQ,SAAAC,GAC9B,OAAOA,EAAE5B,KAAK6B,cAAcC,SAASd,EAAWa,kBAElD,OACE,yBAAKlC,UAAU,OAEf,kBAAC,EAAD,CAAYc,YAAY,eAAeE,aAAcc,KAAKZ,eAE1D,kBAAC,EAAD,CAAUV,MAAOuB,S,GA7BHK,aCOAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.74be5221.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\n\n\nexport const Card = (props) => {\n    return <div className='card-container'> \n                <img alt=\"user\" src={`https://robohash.org/${props.user.id}?set=set2`} />\n                <h2>{props.user.name}</h2>\n                <p>{props.user.email}</p>\n           </div>\n}","import React from 'react';\nimport {Card} from '../card/card.component'\nimport './card-list.styles.css'\n\n\nexport const CardList = (props) => {\n    return <div className='card-list'> \n            {\n                props.users.map( userObj => {\n                return <Card key={userObj.id} user={userObj} />\n            })} \n          </div>\n \n}\n","import React from 'react';\n\nimport './search-list.styles.css'\n\nexport const SearchList = (props) => {\n    \n    return <div className='search-list'> \n            <input\n                type='search'\n                placeholder={props.placeholder}\n                onChange={props.handleChange}\n            />\n          </div>\n \n}","import React, {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport './App.css';\nimport { SearchList } from './components/search-list/search-list.component';\n\n  class App extends Component {\n    constructor(){\n      super();\n      this.state = {\n        data: [],\n        searchText:''\n      }\n    };\n    \n    componentDidMount(){\n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(users => this.setState({data:users}))\n    };\n\n    onDataChange = (e) => {\n      this.setState({searchText:e.target.value})\n    };\n\n  render() {\n    const {data, searchText} = this.state;\n    const filterData = data.filter( _ => {\n      return _.name.toLowerCase().includes(searchText.toLowerCase());\n    })\n    return (\n      <div className=\"App\">\n\n      <SearchList placeholder='search users' handleChange={this.onDataChange}/>\n\n      <CardList users={filterData} />\n\n      </div>\n      );\n    }\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}